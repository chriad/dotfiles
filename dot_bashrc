# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
PATH=$PATH:/home/chriad/.local/bin:/home/chriad/.fzf/bin
PATH=$PATH:/home/chriad/.local/bin/platform-tools
PATH=$PATH:/usr/lib/stardict-tools

export TEXINPUT=.:/home/chriad/.local/share/mystyles/:$TEXINPUTS # for tex2page
export LISP=sbcl
export EDITOR="emacsclient"                  # $EDITOR opens in terminal
#export VISUAL="emacsclient -c -a emacs"
export HUGO_BASE_DIR="~/chriad-blog"
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# jump
eval "$(jump shell bash)"

# <<< bashit

# Path to the bash it configuration
export BASH_IT="/home/chriad/.bash_it"

# Lock and Load a custom theme file.
# Leave empty to disable theming.
# location /.bash_it/themes/
# export BASH_IT_THEME='bobby'

# (Advanced): Change this to the name of your remote repo if you
# cloned bash-it with a remote other than origin such as `bash-it`.
# export BASH_IT_REMOTE='bash-it'

# (Advanced): Change this to the name of the main development branch if
# you renamed it or if it was changed for some reason
# export BASH_IT_DEVELOPMENT_BRANCH='master'

# Your place for hosting Git repos. I use this for private repos.
# export GIT_HOSTING='git@git.domain.com'

# Don't check mail when opening terminal.
unset MAILCHECK

# Change this to your console based IRC client of choice.
# export IRC_CLIENT='irssi'

# Set this to the command you use for todo.txt-cli
# export TODO="t"

# Set this to false to turn off version control status checking within the prompt for all themes
# export SCM_CHECK=true
# Set to actual location of gitstatus directory if installed
#export SCM_GIT_GITSTATUS_DIR="$HOME/gitstatus"
# per default gitstatus uses 2 times as many threads as CPU cores, you can change this here if you must
#export GITSTATUS_NUM_THREADS=8

# Set Xterm/screen/Tmux title with only a short hostname.
# Uncomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

# Set Xterm/screen/Tmux title with only a short username.
# Uncomment this (or set SHORT_USER to something else),
# Will otherwise fall back on $USER.
#export SHORT_USER=${USER:0:8}

# If your theme use command duration, uncomment this to
# enable display of last command duration.
#export BASH_IT_COMMAND_DURATION=true
# You can choose the minimum time in seconds before
# command duration is displayed.
#export COMMAND_DURATION_MIN_SECONDS=1

# Set Xterm/screen/Tmux title with shortened command and directory.
# Uncomment this to set.
#export SHORT_TERM_LINE=true

# Set vcprompt executable path for scm advance info in prompt (demula theme)
# https://github.com/djl/vcprompt
#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

# (Advanced): Uncomment this to make Bash-it reload itself automatically
# after enabling or disabling aliases, plugins, and completions.
# export BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=1

# Uncomment this to make Bash-it create alias reload.
# export BASH_IT_RELOAD_LEGACY=1

# Load Bash It
source "$BASH_IT"/bash_it.sh
# unalias gpo # installed by bashit, conflicts with gpodder executable

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

eval "$(jump shell)"

source ~/.local/bin/{sync-history.sh,fzf-params.sh}

eval "$(starship init bash)"

CALIBRE_ROOT=/media/chriad/ssd-45
GPODDER_ROOT=/media/chriad/ssd-45
QUADERNO_ROOT=/media/chriad/ext4/dpt-mirror # use $QUADERNO_ROOT/dpt

# select a parent directory of the current, means cd parent
cd--p() {
    local declare dirs=()
    get_parent_dirs() {
        if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
        if [[ "${1}" == '/' ]]; then
            for _dir in "${dirs[@]}"; do echo $_dir; done
        else
            get_parent_dirs $(dirname "$1")
        fi
    }
    local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
    cd "$DIR"
}

# Another fd - cd into the selected directory
# This one differs from the above, by only showing the sub directories and not
#  showing the directories within those.
cd--d() {
    # DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
        DIR=`fdfind ".*" -d 1 --type d 2> /dev/null | fzf-tmux` \
            && cd "$DIR"
}

cd--mkcdir ()
{
    mkdir -p -- "$1" &&
        cd -P -- "$1"
}

tv-single() {
    youtube-dl --config-location ~/.config/youtube-dl/config.embed \
               -o '/media/chriad/lenovo/TV/%(extractor)s/%(title)s/%(title)s.%(ext)s' \
               "$@"
}

tv-srf() {
    youtube-dl --config-location ~/.config/youtube-dl/config.embed --hls-prefer-ffmpeg \
               -o '/media/chriad/lenovo/TV/%(extractor)s/%(title)s/%(title)s.%(ext)s' \
               "$@"
}

# yt-single() {
#     youtube-dl --config-location ~/.config/youtube-dl/config.embed \
#                -o '/media/chriad/lenovo/%(extractor)s/%(channel)s/%(title)s.%(ext)s' \
#                "$@"
# }

# --objstm          parse stream of /ObjStm objects
pdf--pdfid-objstm() { pdf-parser.py --type /ObjStm --filter --raw "$1" | pdfid.py --force; }

pdf--extract-cover() {
    convert -thumbnail x300 -background white -alpha remove "${1}"[0] cover.png
}

pdf--thumbnail() {
    pdftoppm -f 1 -l 1 -scale-to 1024 -png  $1 thumb
}

pdf--pdfx-extract-urls ()
{
    pdfx -v "$1" -o urls.txt
}

# pdf--pdfx-metadata() {
#     pdfx -v $1 -o ${1%.pdf}.pdf-metadata
# }

# pdf--pdfgrep-fzf() {
#     # cd media/chriad/E/CALIBRE_LIBRARIES/NEXUS_QUARANTINE;
#     fzf -m --print0 | xargs -0 -I {} sh -c "pdfgrep -m 10 -n -C 3 \"${1}\" '{}' | fzf"
# }

pdf--pdfx-browse-refs-json() {
    pdfx -v --json "${1}" |jid '.references'
}

# pipe this to file for reference for static playlists
dump-playlist-here() {
    youtube-dl --get-title "$1" -o "%(playlist_index)d    %(title)s.%(ext)s" &> "$1".dump
}

ffmpeg--dump-metadata() {
	  ffmpeg -i "$1" -f ffmetadata - 2> /dev/null
}

git_diff_pdf() {
    yes | git difftool --tool=diffpdf $1
}

emby-poster-here() {
	  # first copy pic from firefox contex menu into clipboard: "Copy Image"
	  xclip -selection clipboard -t image/png -o > folder.png
}

youtube-dl-audio() {
    /usr/local/bin/youtube-dl --extract-audio --restrict-filenames --write-info-json --write-description --write-auto-sub --sub-lang en --audio-format mp3 "$1"
}
# youtube-dl-playlist() {
#     /usr/local/bin/youtube-dl -i -c -o '/media/chriad/E/YOUTUBE-PLAYLISTS/%(channel)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' --write-info-json --write-thumbnail --write-description --add-metadata --write-auto-sub --sub-lang en "$1"
# }

mdw() { pandoc "$@" | w3m -T text/html; }

wno() { wn "$1" -over; }

dlocate() { locate -0 "$1" | xargs -0 rm -rf; }

# dirlocate() { locate -r "/$1$"; }
dirlocate() { locate -r "/*$1*"; }

m4b--cover() {
    ffmpeg -i "$1" -map 0:v -map -0:V -c copy cover.jpg
}

iplayer-series() { get_iplayer --type=radio --radio-quality=std --pid="$1" --pid-recursive; }
# iplayer-single b044j7pd --versions=original,podcast
# iplayer-single() { get_iplayer --type=radio --radio-quality=high,std --pid="$1" "$@"; }
iplayer-single() {
    : <<'COMMENT'
--versions=original,podcast
COMMENT
    get_iplayer --type=radio --radio-quality=high,std --pid="$1" "$@"
                 }
iplayer-list() { get_iplayer --type=radio --pid="$1" --pid-recursive-list --sort=firstbcast; }
iplayer-info() { get_iplayer --pid="$1" --info | tee info."$1".txt |egrep "version|qualities"; }


yt-parallel() {
    youtube-dl --get-id "$1" | xargs -I '{}' -P "$2" yt-single 'https://youtube.com/watch?v={}'
}

yt-parallel-playlist() {
    prefix="/media/chriad/lenovo"
    youtube-dl --get-id "$1" | xargs -I '{}' -P "$2" youtube-dl --get-filename --no-playlist --config-location ~/.config/youtube-dl/config.embed -o "$prefix/%(extractor)s/%(channel)s/%(playlist)s/%(playlist_index)s -- %(title)s.%(ext)s" "https://youtube.com/watch?v={}&list=$1"
}

ffmpeg--fprobe-json() {
    ffprobe -v quiet -print_format json -show_format -show_streams "$1"
}

youtube-dl-probe-audio() {
    # 1 for code, 2 for url
    youtube-dl -f "$1"  -o - "$2" | mpv -
}

pdf--pdftk-d() {
    pdf="$1"
    pdftk "$pdf" dump_data_utf8 >"${pdf%pdf}"outline.txt
}

pdf--pdftk-u() {
    pdf="$1"
    pdftk "$pdf" update_info_utf8 "${pdf%pdf}"outline.txt output "${pdf%pdf}"out.pdf
}


pdf--pdftoc2txt() {
    env _JAVA_AWT_WM_NONREPARENTING=1 java -jar /home/chriad/.local/bin/pdfbox-app-3.0.0-alpha2.jar export:text --input="${1}"
}

folderjail() {
    # wrap single file to folder with same name
    fname=`echo "$1" | inline-detox`
    mkdir "${fname%%.*}"
    mv "$1" "${fname%%.*}"
}

epub--subchaps() {
    zipgrep "${1}" "${2}"  > subchaps.txt
}

epub--sort() {
    dos2unix "${1}"
    csplit \
        --quiet \
        --prefix=split- \
        --suffix-format=%02d.txt \
        --suppress-matched \
        "${1}" /^$/ {*}
    rm "${1}"
    for f in *.txt ; do head -n 1 "${f}" >> 1.txt; echo "${f}" >> 2.txt; done
    x=`paste 1.txt 2.txt | sort -k1 | cut -f2 | tr '\n' ' '`
    for i in $x;do cat $i >> output.txt;done
    rm 1.txt 2.txt split-*
    sed -i '/^[[:space:]]*$/d' output.txt
    sed -i 's/.*\(\.xhtml:\|\.html:\)[ \t]*//g' output.txt
    links2 -dump output.txt | egrep -v '^$' > res.txt
}

links2--textify-html-toc() {
    # toc downloaded as html node
    links2 -dump "${1}" | egrep -v '^$' | sed -e 's/^[ \t]*//' | grep --only-matching --extended-regexp "^[0-9]{1,2}.*"
}

links2--chdump() {
    links2 -dump "${1}" > chapters.txt
    cp chapters.txt chaps.txt
}

sed--remove-leading-whitespaces() {
    sed -i -e 's/^[ \t]*//' "${1}"
}

sed--remove-empty-lines() {
    sed -i '/^[[:space:]]*$/d' "${1}"
}

epub--sed-remove-epubzip-file-prefix() {
    sed -i 's/.*\(\.xhtml:\|\.html:\)[ \t]*//g' "${1}"
}

epub--list-file-sizes() {
    zipinfo -l --h --t "${1}" |tr -s ' ' | cut -f4 -d' ' |sort -n|numfmt --to=iec-i
}

# use in top book dir in calibre
epub--extract-images-here() {
    unzip -j "${1}" OEBPS/images/* -d data/IMAGES
}

m4a--prefixcut-inplace ()
{
    mkdir out
    for f in *.m4a ; do
        ffmpeg -ss 00:00:"${1}" -i "${f}" -c:v copy -c:a copy ./out/"${f}";
        /usr/bin/mv -f ./out/"${f}" "${f}"; done
    rm -rf ./out
}



# example: mp3--bulk-title-here chaps.txt
# chaps.txt: file with titles each on one line
mp3--bulk-title-here() {
    dos2unix "${1}"
    operon clear 'title' *.mp3
    ls -1 *.mp3 > flist.txt
    paste flist.txt "$1" > out.txt
    while IFS=$'\t' read -r fname title ; do
        operon add 'title' "${title}" "${fname}"
        # printf '%s\n' "$fname"
        # printf '%s\n' "$title"
    done < out.txt
    rm flist.txt out.txt
}

arte-merge-streams() {
    vid="$1"
    aud="$2"
    sub="$3"
    name="$4"
    ffmpeg -i "${vid}" -i "${aud}" -i "${sub}" -map 0:v -map 1:a -map 2 -c:v copy -c:a copy -c:s mov_text -metadata:s:s:0 language=eng "${name}".mp4
}

arte-merge-combined() {
    vid_aud="$1"
    sub="$2"
    name="$3"
    ffmpeg -hide_banner -loglevel warning -nostats -i "${vid_aud}" -i "${sub}" -map 0:v -map 0:a -map 1 -c:v copy -c:a copy -c:s mov_text -metadata:s:s:0 language=eng "${name}".mp4
}

calibre--search-title() { calibredb list -s title:"${1}"; }

quaderno--download() { dptrp1 --addr 192.168.1.210 download "${1}" ./ ; }

quaderno--delete() { dptrp1 --addr 192.168.1.210 delete "${1}" ; }

bachsplit() {
    flacsplt -o @b__@t__@A__@n -c "$1" "$2"
}

cpdf--graft-annots() {
    source="$1"
    target="$2"
    cpdf -copy-annotations "$source" "$target" -o "${target%pdf}"grafted.pdf
}


# cpdf-embed-annots-texts() {
#     # expect a pdf file with annotations without embedded text
#     source="$1"
#     cp "${source}" "${source%pdf}"bak.pdf
#     cpdf -remove-annotations "${source%pdf}"bak.pdf -o "${source%pdf}"blank.pdf
#     cpdf -copy-annotations "$source" "${source%pdf}"blank.pdf -o "${target%pdf}"annots-text-embedded.pdf
# }

quodlibet--sort-queries() {
    fp='/home/chriad/.var/app/io.github.quodlibet.QuodLibet/config/quodlibet/lists/'
    out=$(paste -sd"\t\n" ${fp}queries.saved | sort -k 2 | tr "\t" "\n" > ${fp}queries.saved.sorted)
    exec $out
    mv ${fp}queries.saved /home/chriad/queries.saved.backup
    mv ${fp}queries.saved.sorted ${fp}queries.saved
}

mp3--prefixcut() {
   for f in *.mp3 ; do mp3splt "${f}" 0."${1}" EOF -o out/@f ; done
}

m4b--prefixcut() {
    for f in *.m4b ; do ffmpeg -ss 00:00:"${1}" -i "${f}" -c:v copy -c:a copy ./out/"${f}" ; done
}

sed--quote-lines() {
    sed 's/^.*$/"&"/g'
}

mp3--merge-chapters() {
    local a
    local b
    a="${1}"
    b="${2}"
    tr '"' '`' < "$b" > "${b%txt}"clean.txt
    sed 's/^.*$/"&"/g' "${b%txt}"clean.txt > "${b%txt}"quoted.txt
    paste "${a}" "${b%txt}"quoted.txt |tr -d '\t' > "${b%txt}"out.csv
}

cpdf--dump-annot-to-file() {
    pdf="$1"
    cpdf -list-annotations-json "$pdf" > "${pdf%pdf}"annots.json
}

# mutool-clean() {
#     pdf="$1"
#     mutool clean -gggg "$pdf" "${pdf%pdf}"clean.pdf
# }

pdf--gartenfreund() {
    pdf="$1"
    ocrmypdf -l deu --force-ocr "$pdf" "${pdf%pdf}".ocr.pdf
}

calibre--ebook-edit() {
    local d
    d=$CALIBRE_ROOT/reflowable
    ebook-edit "$d/$(fd --prune -e epub --base-directory $d |fzf)"
}

calibre--ebook-view() {
    local d
    d=$CALIBRE_ROOT/reflowable
    ebook-viewer "$d/$(fd --prune -e epub --base-directory $d |fzf)"
}

calibre--cd-data-folders() {
    local d
    d=$CALIBRE_ROOT/reflowable
    cd "$d/$(fd --prune -t d --base-directory $d --glob "data" |fzf --preview 'ls {}')"
    # fd --prune -t d --base-directory $d --glob "data" |fzf --bind  "enter:execute(cd \"/media/chriad/ssd-45/reflowable/{+}\")+accept"
}

calibre--switch-data-folders() {
    local d
    d=$CALIBRE_ROOT/reflowable
    DIR=`fd --prune -t d --base-directory $d --glob "data" | fzf-tmux` && cd $d/"$DIR"
}

pdf--convert-grayscale() {
    # https://superuser.com/questions/104656/convert-a-pdf-to-greyscale-on-the-command-line-in-floss
    source="$1"
    ghostscript \
        -dAutoRotatePages=/None \
        -sOutputFile="${source%pdf}greyscaled".pdf \
        -sDEVICE=pdfwrite \
        -sColorConversionStrategy=Gray \
        -dProcessColorModel=/DeviceGray \
        -dCompatibilityLevel=1.4 \
        -dNOPAUSE \
        -dBATCH \
        "$source"
}

quaderno--pdffd() {
    local path="$QUADERNO_ROOT/dpt"
    fdfind -e pdf . $path 2> /dev/null | fzf --bind='enter:execute(flatpak run org.kde.okular {} &)+abort'
    # fdfind -e pdf . $path 2> /dev/null | fzf --bind='enter:execute(sioyek {} &)+abort'
}

# mvdoc() {
    
# }

flatapps() {
    flatpak list | cut -f 2 | fzf
}

# from linux phrasebook
listfunc () {
    for func in $(compgen -A function | grep -v _);
    do
        declare -f $func;
        echo -e "\r";
    done
}

pdf--drop-pdfimages () {
    # pdfimages -all -p -f 11 -l 30 <file>.pdf ./images/image-
    mkdir images
    pdfimages -p "$1" ./images/image-
}

function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

## m4b functions

function m4b--rmlyrics() {
    # remove lyrics from source file before using LosslessCut
    fil="$1"
    case $fil in
      *.m4b)
        mp4tags -r "lyrics" "${fil}"
        ;;

      *.mp3)
        operon clear lyrics "${fil}"
        ;;

      *)
        exit 1
        ;;
    esac
}

calibre--favorites() {
    calibredb list -s "#rating:true" | fzf --header-lines 1
}

schimanski-missing() {
    cat <<EOF
Der Fall Schimanski
Gebrochene Blueten
Spielverderber
Schwarzes Wochenende
Doppelspiegel
EOF
}

audacity--labels-to-csv() {
    # some file exported by audacity called Labels.txt
    fil="$1"
    csvformat -t -D, "${fil}" > "${fil%txt}"csv
}

function m4b--title() {
    # Set title to filename in LosslessCut output
    for rc in *.m4b; do
        operon fill --dry-run "<title>.m4b" "$rc"
        operon fill "<title>.m4b" "$rc"
    done
    for rc in *.mp3; do
        operon fill --dry-run "<title>.mp3" "$rc"
        operon fill "<title>.mp3" "$rc"
    done

}

export GOROOT=$HOME/go
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:/var/lib/flatpak/exports/bin


export GUIX_LOCPATH="$HOME/.guix-profile/lib/locale"

# flatpak aliases
if [ -d ~/.bashrc.d ]; then
    for rc in ~/.bashrc.d/*; do
        if [ -f "$rc" ]; then
            . "$rc"
        fi
    done
fi
unset rc

TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata

# opam configuration
test -r /home/chriad/.opam/opam-init/init.sh && . /home/chriad/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

# BEGIN_KITTY_SHELL_INTEGRATION
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; fi
# END_KITTY_SHELL_INTEGRATION

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/chriad/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/chriad/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/chriad/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/chriad/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

