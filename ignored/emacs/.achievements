(#s(emacs-achievement "Achiever" "You used the achievements package." t nil nil 5 0 nil)
   #s(emacs-achievement "Not All There" "You have a fractional achievement score."
                        (lambda nil
                          (and
                           (/= achievements-score
                               (round achievements-score))))
                        nil nil 0.5 0 nil)
   #s(emacs-achievement "Unlocker" "You have earned over 50 points in Emacs achievements.  Not bad." t nil nil 5 0 advanced-achievements)
   #s(emacs-achievement "Over Achiever" "You have earned 500 points in Emacs achievements.  Don't you have some real work to do?"
                        (lambda nil
                          (and
                           (>= achievements-score 500)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Cheater" "You have earned all Emacs achievements.  Actually that's impossible."
                        (lambda nil
                          (and
                           (every #'achievements-earned-p achievements-list)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Free Software Zealot" "You've read the sales pitch."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(about-emacs describe-copying describe-distribution describe-gnu-project describe-no-warranty))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "First things first" "You learned new things by using `help-for-help'." t nil nil 5 0 nil)
   #s(emacs-achievement "Show me the way" "You learned new things by using `help-with-tutorial'." t nil nil 5 0 nil)
   #s(emacs-achievement "RTFM" "You learned new things by using `info-emacs-manual'." t nil nil 5 0 nil)
   #s(emacs-achievement "Log Auditor" "You learned new things by using `view-echo-area-messages'." t nil nil 5 0 nil)
   #s(emacs-achievement "FAQ" "You learned new things by using `view-emacs-FAQ'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'view-emacs-FAQ)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "What's new?" "You learned new things by using `view-emacs-news'." t nil nil 5 0 nil)
   #s(emacs-achievement "Am I the only one?" "You learned new things by using `view-emacs-problems'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'view-emacs-problems)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Entomologist" "You learned new things by using `view-emacs-debugging'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'view-emacs-debugging)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Joining the cause" "You learned new things by using `view-emacs-todo'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'view-emacs-todo)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Where else can I look?" "You learned new things by using `view-external-packages'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'view-external-packages)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "World Traveler" "You learned new things by using `(view-hello-file describe-language-environment describe-input-method describe-coding-system)'."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(view-hello-file describe-language-environment describe-input-method describe-coding-system))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Package Hunter" "You learned new things by using `(finder-by-keyword describe-package)'." t nil nil 5 0 nil)
   #s(emacs-achievement "I know I read it somewhere" "You answered a question by using `apropos-documentation'." t nil nil 5 0 nil)
   #s(emacs-achievement "Apropos of Nothing" "You answered a question by using `apropos'." t nil nil 5 0 nil)
   #s(emacs-achievement "Answer in search of a question" "You answered a question by using `apropos-value'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'apropos-value)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "What to type?" "You answered a question by using `describe-bindings'." t nil nil 5 0 nil)
   #s(emacs-achievement "What does this do?" "You answered a question by using `(describe-function Info-goto-emacs-command-node info-lookup-symbol describe-variable describe-mode)'."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(describe-function Info-goto-emacs-command-node info-lookup-symbol describe-variable describe-mode))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "What happens when I do this?" "You answered a question by using `(describe-key describe-key-briefly Info-goto-emacs-key-command-node where-is)'."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(describe-key describe-key-briefly Info-goto-emacs-key-command-node where-is))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "When is a word not a word?" "You answered a question by using `describe-syntax'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'describe-syntax)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "What did I just do?" "You answered a question by using `(command-history view-lossage)'." t nil nil 5 0 nil)
   #s(emacs-achievement "Shortcut genius" "You don't need to learn new shortcuts anymore."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(suggest-key-bindings nil))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Streamlined" "Your .emacs took less that 1 second to load."
                        (lambda nil
                          (and
                           (<
                            (float-time
                             (time-subtract after-init-time before-init-time))
                            1)))
                        t nil 5 0 nil)
   #s(emacs-achievement "Oops" "Your .emacs file had an error."
                        (lambda nil
                          (and init-file-had-error))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Traditionalist" "You use .emacs instead of .emacs.d/init.el." t nil nil 5 0 nil)
   #s(emacs-achievement "Modernist" "You use .emacs.d/init.el instead of .emacs."
                        (lambda nil
                          (and
                           (string-match "/init\\.el\\'" user-init-file)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Post Modernist" "You don't use .emacs.d/init.el or .emacs."
                        (lambda nil
                          (and
                           (not
                            (or
                             (string-match "/init\\.el\\'" user-init-file)
                             (string-match "/\\.emacs\\'" user-init-file)))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Need for Speed" "Your .emacs is byte-compiled."
                        (lambda nil
                          (and
                           (or
                            (file-exists-p
                             (concat user-init-file "c"))
                            (file-exists-p
                             (concat user-init-file ".elc")))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Last Year's Model" "Your byte-compiled .emacs is out of date."
                        (lambda nil
                          (and
                           (cond
                            ((file-exists-p
                              (concat user-init-file "c"))
                             (file-newer-than-file-p user-init-file
                                                     (concat user-init-file "c")))
                            ((file-exists-p
                              (concat user-init-file ".elc"))
                             (file-newer-than-file-p user-init-file
                                                     (concat user-init-file ".elc"))))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Purest Vanilla" "You have no .emacs file.  How is that even possible?"
                        (lambda nil
                          (and
                           (not
                            (file-exists-p user-init-file))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Twenty Five" "You have enjoyed `5x5'." t nil nil 5 50 nil)
   #s(emacs-achievement "The Future of Pixar" "You have enjoyed `((animate-string animate-sequence animate-birthday-present))'."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '((animate-string animate-sequence animate-birthday-present)))))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Van Gogh" "You have enjoyed `artist-mode'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'artist-mode)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Hide and Seek" "You have enjoyed `blackbox'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'blackbox)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Blubb blubb" "You have enjoyed `bubbles'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'bubbles)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Change the world!" "You have enjoyed `butterfly'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'butterfly)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Spy vs Spy" "You have enjoyed `decipher'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'decipher)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Tabloids" "You have enjoyed `dissociated-press'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'dissociated-press)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "I <3 Eliza" "You have enjoyed `doctor'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'doctor)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Adventure!" "You have enjoyed `dunnet'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'dunnet)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Connect 5" "You have enjoyed `gomoku'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'gomoku)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Penmanship" "You have enjoyed `handwrite'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'handwrite)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Saigon" "You have enjoyed `hanoi'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'hanoi)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "It's Alive!" "You have enjoyed `life'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'life)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Telegraph Operator" "You have enjoyed `morse-region'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'morse-region)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Arithmetician" "You have enjoyed `mpuz'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'mpuz)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Ping" "You have enjoyed `pong'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'pong)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Chase your tail" "You have enjoyed `snake'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'snake)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "All alone?" "You have enjoyed `solitaire'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'solitaire)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Tessellator" "You have enjoyed `tetris'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'tetris)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Yow!" "You have enjoyed `yow'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'yow)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "The Matrix" "You have enjoyed `zone'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'zone)))
                        nil nil 5 50 nil)
   #s(emacs-achievement "Um, Star?" "You have installed and enjoyed `emstar'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'emstar)))
                        nil nil 5 100 nil)
   #s(emacs-achievement "Can you read upside down?" "You have installed and enjoyed `fliptext-flip-region'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'fliptext-flip-region)))
                        nil nil 5 100 nil)
   #s(emacs-achievement "Hack, hack, hack" "You have installed and enjoyed `nethack'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'nethack)))
                        nil nil 5 100 nil)
   #s(emacs-achievement "Nyan, Nyan, Nyan" "You have installed and enjoyed `nyan-mode'."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'nyan-mode)))
                        nil nil 5 100 nil)
   #s(emacs-achievement "Pretty Stable" "You have an uptime of over 1 day."
                        (lambda nil
                          (and
                           (featurep 'uptimes)
                           (>
                            (let*
                                ((uptime
                                  (car uptimes-top-n))
                                 (seconds
                                  (-
                                   (cddr uptime)
                                   (cadr uptime))))
                              seconds)
                            86400)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "It keeps going and going..." "You have an uptime of over 1 week."
                        (lambda nil
                          (and
                           (featurep 'uptimes)
                           (>
                            (let*
                                ((uptime
                                  (car uptimes-top-n))
                                 (seconds
                                  (-
                                   (cddr uptime)
                                   (cadr uptime))))
                              seconds)
                            604800)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Marathon Hacker" "You have an uptime of over 30 days."
                        (lambda nil
                          (and
                           (featurep 'uptimes)
                           (>
                            (let*
                                ((uptime
                                  (car uptimes-top-n))
                                 (seconds
                                  (-
                                   (cddr uptime)
                                   (cadr uptime))))
                              seconds)
                            2592000)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Methuselah" "You have an uptime of over 1 year!?"
                        (lambda nil
                          (and
                           (featurep 'uptimes)
                           (>
                            (let*
                                ((uptime
                                  (car uptimes-top-n))
                                 (seconds
                                  (-
                                   (cddr uptime)
                                   (cadr uptime))))
                              seconds)
                            31536000)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Short Story" "You've written the equivalent of a short story." t nil nil 5 0 nil)
   #s(emacs-achievement "Nanowrimo" "You could have finished Nanowrimo by now."
                        (lambda nil
                          (and
                           (>
                            (achievements-num-times-commands-were-run
                             '(self-insert-command org-self-insert-command))
                            300000)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "War and Peace" "You've written the equivalent of War and Peace."
                        (lambda nil
                          (and
                           (>
                            (achievements-num-times-commands-were-run
                             '(self-insert-command org-self-insert-command))
                            3523722)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Proust" "You could have beaten Proust for longest novel."
                        (lambda nil
                          (and
                           (>
                            (achievements-num-times-commands-were-run
                             '(self-insert-command org-self-insert-command))
                            7200000)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Loyalist" "You use GNU Emacs" t nil nil 5 0 nil)
   #s(emacs-achievement "Patriot or Rebel?" "You use XEmacs"
                        (lambda nil
                          (and
                           (string-match "XEmacs\\|Lucid" emacs-version)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Green Glowing faces" "You have used the console version Emacs."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(window-system nil))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "X marks the spot" "You have used the x version Emacs." t nil nil 5 0 nil)
   #s(emacs-achievement "MacPort or Aquamacs" "You have used the mac version Emacs."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(window-system mac))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "GNUStep or Cocoa" "You have used the nextstep version Emacs."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(window-system ns))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Windows" "You have used the windows version Emacs."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(window-system w32))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "DOS?" "You have used the DOS version Emacs."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(window-system pc))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Following the Hurd" "You have used Emacs on a gnu system."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(system-type gnu))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Tux's Friend" "You have used Emacs on a gnu/linux system." t nil nil 5 0 nil)
   #s(emacs-achievement "Beastie's Pal" "You have used Emacs on a gnu/kfreebsd system."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(system-type gnu/kfreebsd))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Friends with Hexley" "You have used Emacs on a darwin system."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(system-type darwin))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "DOS Box" "You have used Emacs on a ms-dos system."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(system-type ms-dos))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Windows Machine" "You have used Emacs on a windows-nt system."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(system-type windows-nt))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "The Swan" "You have used Emacs on a cygwin system."
                        (lambda nil
                          (and
                           (achievements-variable-was-set
                            '(system-type cygwin))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Anonymous" "You have `user-mail-address' set to nil."
                        (lambda nil
                          (and
                           (equal user-mail-address nil)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "The One and Only" "You are Richard Stallman."
                        (lambda nil
                          (and
                           (equal user-mail-address "rms@gnu.org")))
                        nil nil 50 0 nil)
   #s(emacs-achievement "A Well Oiled Machine" "You have helped maintain Emacs."
                        (lambda nil
                          (and
                           (member user-mail-address
                                   '("rms@gnu.org" "cyd@gnu.org" "monnier@iro.umontreal.ca" "eliz@gnu.org" "johnw@gnu.org" "larsi@gnus.org" "acorallo@gnu.org"))))
                        nil nil 50 0 nil)
   #s(emacs-achievement "Tainted Love" "You have enabled non-GNU package repositories." t nil nil 5 0 nil)
   #s(emacs-achievement "Vanilla" "You have no installed packages."
                        (lambda nil
                          (and
                           (=
                            (length package-alist)
                            0)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Package Neophyte" "You have installed at least 1 package." t nil nil 5 0 nil)
   #s(emacs-achievement "Package Apprentice" "You have installed over 10 packages." t nil nil 5 0 nil)
   #s(emacs-achievement "Package Journeyman" "You have installed over 100 packages." t nil nil 5 0 nil)
   #s(emacs-achievement "Clean Desk" "You have less than 10 buffers open."
                        (lambda nil
                          (and
                           (<=
                            (length
                             (buffer-list))
                            10)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Messy Desk" "You have over 100 buffers open." t nil nil 5 0 nil)
   #s(emacs-achievement "Papers to the ceiling" "You have over 1000 buffers open."
                        (lambda nil
                          (and
                           (>=
                            (length
                             (buffer-list))
                            1000)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "The Ol' Switcheroo" "You've switched to another buffer"
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '((switch-to-buffer ido-switch-buffer)))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Buffer, buffers, everywhere" "You've seen all the buffers that can be seen." t nil nil 5 0 nil)
   #s(emacs-achievement "Top o' the morning" "You've used Emacs as a replacement for top."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'proced)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Archer" "You use the arrow keys a lot." t nil nil 5 0 nil)
   #s(emacs-achievement "William Tell" "You use the arrow keys for almost everything." t nil nil 5 0 nil)
   #s(emacs-achievement "No arrows" "You know the replacements for the arrow keys."
                        (lambda nil
                          (and nil))
                        nil
                        #[0 "	>\205 \n>?\205 \304	\"\211G\305=\207"
                            [this-command achievements--arrow-key-replacement-commands last-input-event achievements--arrow-keys-needing-replacements delete 0]
                            4]
                        5 0 nil)
   #s(emacs-achievement "Inception" "You have used recursive editing and exited succesfully."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(recursive-edit exit-recursive-edit))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Narrow minded" "You have used narrowing."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '((narrow-to-region narrow-to-page narrow-to-defun)))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Forbidden Fruits" "You have used all disabled commands."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(chezmoi-diff list-timers Info-edit narrow-to-page set-goal-column list-threads help-fns-edit-variable))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Enabler" "You have enabled all commands."
                        (lambda nil
                          (and
                           (= 0
                              (length
                               (cl-loop for s being the symbols when
                                        (get s 'disabled)
                                        collect s)))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Case Changer" "You have changed the case of a few words."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(upcase-word downcase-word capitalize-word))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "CASE CHANGER" "You have changed the case of vast amounts of text."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '(upcase-region downcase-region))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "The Great Destroyer" "You have laid waste to an entire buffer in one go."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'erase-buffer)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Goal Setter" "You have set the goal column."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'set-goal-column)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Wide Load" "You have scrolled to see an extra wide buffer."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'scroll-left)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Dired reuse" "You have reused a dired buffer to look at another file/directory."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'dired-find-alternate-file)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Yes Man" "You can't say no."
                        (lambda nil
                          (and
                           (and
                            (>=
                             (length yes-or-no-p-history)
                             10)
                            (every
                             (lambda
                               (x)
                               (equal "yes" x))
                             yes-or-no-p-history))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Leaving Home" "You have edited files outside your home directory." t nil nil 5 0 nil)
   #s(emacs-achievement "The Examined Life" "You have command logging enabled."
                        (lambda nil
                          (and
                           (achievements-command-was-run 'keyfreq-show)))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Playing it Safe" "Your .emacs is under version control."
                        (lambda nil
                          (and
                           (and
                            (require 'vc nil t)
                            (vc-backend user-init-file))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Arbitrator" "You have used smerge-mode to resolve conflicts."
                        (lambda nil
                          (and
                           (achievements-command-was-run
                            '((smerge-keep-all smerge-keep-base smerge-keep-current smerge-keep-mine smerge-keep-other)))))
                        nil nil 5 0 nil)
   #s(emacs-achievement "Surfs up" "You use Emacs for surfing the web" t nil nil 5 0 nil)
   #s(emacs-achievement "Polyglot" "You have used over 20 major-modes at once." t nil nil 5 0 nil)
   #s(emacs-achievement "Org-anizer" "You have used `org-mode'." t nil nil 5 0 org-achievements))
